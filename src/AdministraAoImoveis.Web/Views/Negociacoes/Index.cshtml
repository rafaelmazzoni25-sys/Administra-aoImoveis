@model NegotiationBoardViewModel
@using AdministraAoImoveis.Web.Domain.Enumerations
@using System.Globalization
@{
    ViewData["Title"] = "Negociações";
}

<section class="space-y-4">
    @if (TempData["Error"] is string errorMessage)
    {
        <div class="alert alert-error" id="kanban-error">@errorMessage</div>
    }
    @if (TempData["Success"] is string successMessage)
    {
        <div class="alert alert-success" id="kanban-success">@successMessage</div>
    }
</section>

<form asp-antiforgery="true" id="kanban-token"></form>

<section class="kanban-board" data-update-url="@Url.Action("AtualizarQuadro")">
    @foreach (var coluna in Model.Colunas)
    {
        <div class="kanban-column" data-stage="@coluna.Key">
            <header class="kanban-column-header">
                <h3>@coluna.Key</h3>
                <span>@coluna.Value.Count</span>
            </header>
            <div class="kanban-items" data-stage-target="@coluna.Key">
                @if (!coluna.Value.Any())
                {
                    <div class="empty-state">Sem itens</div>
                }
                else
                {
                    foreach (var negociacao in coluna.Value)
                    {
                        <article class="kanban-card" draggable="true" data-negociacao-id="@negociacao.Id" data-etapa="@negociacao.Etapa" data-reserva="@negociacao.ReservadoAte?.ToString("O")" data-sinal="@negociacao.ValorSinal">
                            <header>
                                <strong>@negociacao.Imovel?.CodigoInterno</strong>
                                <span>@negociacao.Interessado?.Nome</span>
                            </header>
                            <dl>
                                <div>
                                    <dt>Etapa</dt>
                                    <dd>@negociacao.Etapa</dd>
                                </div>
                                <div>
                                    <dt>Desde</dt>
                                    <dd>@negociacao.CreatedAt:dd/MM/yyyy</dd>
                                </div>
                                @if (negociacao.ReservadoAte.HasValue)
                                {
                                    <div>
                                        <dt>Reserva</dt>
                                        <dd>@negociacao.ReservadoAte:dd/MM/yyyy HH:mm</dd>
                                    </div>
                                }
                                @if (negociacao.ValorSinal.HasValue)
                                {
                                    <div>
                                        <dt>Sinal</dt>
                                        <dd>@negociacao.ValorSinal.Value.ToString("C", CultureInfo.GetCultureInfo("pt-BR"))</dd>
                                    </div>
                                }
                            </dl>
                            <footer>
                                <a class="btn-link" asp-controller="Financeiro" asp-action="Index" asp-route-negotiationId="@negociacao.Id">Financeiro</a>
                                <button class="btn-link editar-card" type="button" data-negociacao="@negociacao.Id">Editar</button>
                            </footer>
                            <form asp-action="Encerrar" method="post" class="inline-flex gap-2 mt-2">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@negociacao.Id" />
                                <button type="submit" name="concluida" value="false" class="btn btn-secondary">Cancelar</button>
                                <button type="submit" name="concluida" value="true" class="btn btn-success">Concluir</button>
                            </form>
                        </article>
                    }
                }
            </div>
        </div>
    }
</section>

<dialog id="negociacao-editor" class="modal">
    <form method="post" asp-action="Mover" class="modal-box space-y-4" id="negociacao-editor-form">
        @Html.AntiForgeryToken()
        <input type="hidden" name="id" id="editor-id" />
        <div>
            <label class="input-label" for="editor-etapa">Etapa</label>
            <select class="input" id="editor-etapa" name="novaEtapa">
                @foreach (var etapa in Model.Etapas)
                {
                    <option value="@etapa">@etapa</option>
                }
            </select>
        </div>
        <div>
            <label class="input-label" for="editor-sinal">Valor de sinal</label>
            <input class="input" id="editor-sinal" name="valorSinal" type="number" step="0.01" />
        </div>
        <div>
            <label class="input-label" for="editor-reserva">Reserva até</label>
            <input class="input" id="editor-reserva" name="reservadoAte" type="datetime-local" />
        </div>
        <div class="flex justify-end gap-2">
            <button type="button" class="btn-secondary" data-close-modal>Fechar</button>
            <button type="submit" class="btn btn-primary">Salvar</button>
        </div>
    </form>
</dialog>

@section Scripts {
    <script>
        (() => {
            const board = document.querySelector('.kanban-board');
            if (!board) {
                return;
            }

            const updateUrl = board.dataset.updateUrl;
            const antiforgery = document.querySelector('#kanban-token input[name="__RequestVerificationToken"]');
            const columns = board.querySelectorAll('.kanban-items');
            let dragged = null;

            columns.forEach(col => {
                col.addEventListener('dragover', (event) => {
                    event.preventDefault();
                    col.classList.add('kanban-drop');
                });
                col.addEventListener('dragleave', () => {
                    col.classList.remove('kanban-drop');
                });
                col.addEventListener('drop', async (event) => {
                    event.preventDefault();
                    col.classList.remove('kanban-drop');
                    if (!dragged) {
                        return;
                    }

                    const stage = col.dataset.stageTarget;
                    const negotiationId = dragged.dataset.negociacaoId;

                    try {
                        const response = await fetch(updateUrl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': antiforgery?.value ?? ''
                            },
                            body: JSON.stringify({ negotiationId: negotiationId, stage: stage })
                        });

                        if (!response.ok) {
                            const payload = await response.json().catch(() => ({}));
                            const message = payload.erro ?? 'Não foi possível mover a negociação.';
                            mostrarErro(message);
                            return;
                        }

                        col.appendChild(dragged);
                        dragged.dataset.etapa = stage;
                        mostrarSucesso('Negociação atualizada.');
                    } catch (error) {
                        mostrarErro('Falha de comunicação com o servidor.');
                    }
                });
            });

            board.querySelectorAll('.kanban-card').forEach(card => {
                card.addEventListener('dragstart', () => {
                    dragged = card;
                    card.classList.add('kanban-dragging');
                });
                card.addEventListener('dragend', () => {
                    card.classList.remove('kanban-dragging');
                    dragged = null;
                });
            });

            board.querySelectorAll('.editar-card').forEach(button => {
                button.addEventListener('click', (event) => {
                    const card = event.currentTarget.closest('.kanban-card');
                    if (!card) {
                        return;
                    }

                    document.getElementById('editor-id').value = card.dataset.negociacaoId;
                    document.getElementById('editor-etapa').value = card.dataset.etapa;
                    document.getElementById('editor-sinal').value = card.dataset.sinal ?? '';
                    const reserva = card.dataset.reserva;
                    document.getElementById('editor-reserva').value = reserva ? new Date(reserva).toISOString().slice(0, 16) : '';

                    document.getElementById('negociacao-editor').showModal();
                });
            });

            document.querySelectorAll('[data-close-modal]').forEach(btn => {
                btn.addEventListener('click', () => document.getElementById('negociacao-editor')?.close());
            });

            function mostrarErro(mensagem) {
                const target = document.getElementById('kanban-error') ?? criarBanner('kanban-error', 'alert alert-error');
                target.textContent = mensagem;
            }

            function mostrarSucesso(mensagem) {
                const target = document.getElementById('kanban-success') ?? criarBanner('kanban-success', 'alert alert-success');
                target.textContent = mensagem;
            }

            function criarBanner(id, classe) {
                const container = document.querySelector('.space-y-4');
                const banner = document.createElement('div');
                banner.id = id;
                banner.className = classe;
                container?.prepend(banner);
                return banner;
            }
        })();
    </script>
}
