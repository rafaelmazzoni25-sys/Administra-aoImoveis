# Ferramenta Propriet√°ria de Gest√£o Imobili√°ria

Este reposit√≥rio cont√©m uma implementa√ß√£o de refer√™ncia totalmente **propriet√°ria** da plataforma descrita no documento funcional. O objetivo √© oferecer, em um √∫nico backend C#/.NET 8, todos os m√≥dulos internos necess√°rios para controlar im√≥veis, negocia√ß√µes, vistorias, manuten√ß√£o, finan√ßas e comunica√ß√£o ‚Äì sem depend√™ncias externas com servi√ßos de terceiros.

## üöÄ Vis√£o Geral

A solu√ß√£o est√° estruturada em camadas:

- **AdministraAoImoveis.Domain** ‚Äì Entidades ricas, enums e servi√ßos de dom√≠nio para disponibilidade de im√≥veis, pipeline comercial, vistorias, manuten√ß√£o, tarefas, matrizes de prioridade, documentos, controle financeiro, threads de comunica√ß√£o, CRM de leads, portal propriet√°rio/interessado, notifica√ß√µes e trilhas de auditoria.
- **AdministraAoImoveis.Application** ‚Äì DTOs e orquestra√ß√µes que exp√µem casos de uso de cada m√≥dulo.
- **AdministraAoImoveis.Infrastructure** ‚Äì Reposit√≥rios em mem√≥ria e composi√ß√£o de depend√™ncias para execu√ß√£o imediata sem configura√ß√£o adicional.
- **AdministraAoImoveis.Api** ‚Äì API REST minimalista com Swagger cobrindo todos os fluxos propriet√°rios.

> Todos os dados permanecem em mem√≥ria na execu√ß√£o de refer√™ncia. Para uso em produ√ß√£o basta substituir os reposit√≥rios por implementa√ß√µes persistentes (EF Core, Dapper, etc.) sem alterar as regras de neg√≥cio.

## ‚ñ∂Ô∏è Executando

1. Instale o [.NET SDK 8.0](https://dotnet.microsoft.com/download).
2. No diret√≥rio raiz, execute:

   ```bash
   dotnet restore
   dotnet run --project src/AdministraAoImoveis.Api/AdministraAoImoveis.Api.csproj
   ```

3. A API sobe com Swagger em `https://localhost:5001/swagger` (ou `http://localhost:5000/swagger`).

## üß© M√≥dulos Dispon√≠veis

- **Im√≥veis** ‚Äì Cadastro completo, hist√≥rico de status, bloqueios autom√°ticos por manuten√ß√£o ou pend√™ncias.
- **Negocia√ß√µes** ‚Äì Pipeline kanban com controle de etapas, bloqueio √∫nico por im√≥vel e validade de proposta.
- **Vistorias** ‚Äì Agendamento, conclus√£o com checklist, gera√ß√£o autom√°tica de pend√™ncias e integra√ß√£o com manuten√ß√£o.
- **Pend√™ncias e Tarefas** ‚Äì Controle de SLA, escalonamento e matriz de prioridade (cr√≠tico/alto/padr√£o/oportunidade).
- **Agenda** ‚Äì Eventos internos ligados a vistorias, negocia√ß√µes e manuten√ß√£o.
- **Manuten√ß√£o** ‚Äì Ordens de servi√ßo com hist√≥rico, custos e v√≠nculo direto com im√≥veis.
- **Financeiro** ‚Äì Lan√ßamentos propriet√°rios (sinal, cau√ß√£o, aluguel, taxas, manuten√ß√£o) com bloqueios autom√°ticos de disponibilidade.
- **Documentos e Assinaturas Internas** ‚Äì Workflows propriet√°rios de gera√ß√£o, coleta de assinaturas e arquivamento.
- **Comunica√ß√£o Interna** ‚Äì Threads por contexto (im√≥vel, negocia√ß√£o, vistoria, manuten√ß√£o, tarefas, financeiro, lead) com men√ß√µes e notifica√ß√µes in-app.
- **CRM de Leads** ‚Äì Capta√ß√£o, atribui√ß√£o, intera√ß√£o e evolu√ß√£o de est√°gio sem depender de portais externos.
- **Portais Propriet√°rio/Interessado** ‚Äì Contas pr√≥prias com autentica√ß√£o, redefini√ß√£o de senha, pap√©is e registro de acessos.
- **Notifica√ß√µes** ‚Äì Mensageria interna com severidade e marca√ß√£o de leitura.
- **Auditoria** ‚Äì Registro imut√°vel das a√ß√µes relevantes em todos os m√≥dulos.

## üì° Endpoints Principais

Todos os recursos possuem rotas REST documentadas automaticamente pelo Swagger. Destaques:

| Dom√≠nio | Exemplos de rotas |
| --- | --- |
| Im√≥veis | `POST /api/properties`, `GET /api/properties/{code}` |
| Negocia√ß√µes | `POST /api/negotiations`, `POST /api/negotiations/{id}/advance` |
| Vistorias | `POST /api/inspections`, `POST /api/inspections/{id}/complete` |
| Tarefas | `POST /api/tasks`, `GET /api/tasks/matrix` |
| Financeiro | `POST /api/financial`, `POST /api/financial/{id}/payment`, `GET /api/financial/blocking` |
| Documentos | `POST /api/documents/workflows`, `POST /api/documents/workflows/{id}/signatures` |
| Comunica√ß√£o | `POST /api/communications`, `POST /api/communications/{id}/messages` |
| Leads | `POST /api/leads`, `POST /api/leads/{id}/status` |
| Portal | `POST /api/portal/accounts`, `POST /api/portal/authenticate` |
| Notifica√ß√µes | `POST /api/notifications`, `GET /api/notifications/pending/{recipient}` |
| Auditoria | `POST /api/audit`, `GET /api/audit` |

Cada rota opera exclusivamente com dados do pr√≥prio sistema, refor√ßando o car√°ter propriet√°rio da ferramenta.

## üó∫Ô∏è Pr√≥ximos Passos Sugeridos

- Substituir os reposit√≥rios em mem√≥ria por uma camada de persist√™ncia real (SQL ou NoSQL) e storage seguro de arquivos.
- Implementar autentica√ß√£o JWT, RBAC granular e controle de sess√£o para os portais interno, propriet√°rio e interessado.
- Adicionar camadas de apresenta√ß√£o (web/mobile) consumindo os endpoints expostos aqui.
- Instrumentar logs, m√©tricas e alertas internos mantendo todos os dados e integra√ß√µes dentro da infraestrutura da imobili√°ria.

## ‚úÖ Filosofia Propriet√°ria

- Nenhum m√≥dulo depende de servi√ßos externos: toda automatiza√ß√£o (assinaturas, notifica√ß√µes, agenda, CRM, financeiro) foi modelada para execu√ß√£o local.
- A arquitetura modular permite expandir funcionalidades mantendo o controle completo sobre dados, fluxos e seguran√ßa.
- A implementa√ß√£o serve como base para evolu√ß√£o incremental, preservando o car√°ter fechado da solu√ß√£o.

